package Daa;

import java.util.*;

public class Dijktras 

{
    static class Edge 
    {
  int src, dest, wt;

        Edge(int src, int dest, int wt) {

            this.src = src;

            this.dest = dest;

            this.wt = wt;

        }

    }
    static class Pair implements Comparable<Pair> 

    {

        int n, path;

        Pair(int n, int path) {

            this.n = n;

            this.path = path;

        }

        public int compareTo(Pair p2) 

        {

            return this.path - p2.path;

        }

    }

    public static void main(String[] args) 

    {

        Scanner sc = new Scanner(System.in);



        // Input number of vertices and edges

        System.out.println("Enter number of vertices:");

        int v = sc.nextInt();

        System.out.println("Enter number of edges:");

        int e = sc.nextInt();

        // Initialize adjacency list

        ArrayList<Edge>[] g = new ArrayList[v];

        for (int i = 0; i < v; i++) 

        {

            g[i] = new ArrayList<>();

        }

        // Input edges

        System.out.println("Enter each edge as: src dest weight");

        for (int i = 0; i < e; i++) 

        {

            int src = sc.nextInt();

            int dest = sc.nextInt();

            int wt = sc.nextInt();

            g[src].add(new Edge(src, dest, wt));

        }

        // Input source node

        System.out.println("Enter source node:");

        int src = sc.nextInt();



        // Perform Dijkstra's algorithm

        dij(g, src);

        sc.close();

    }

    public static void dij(ArrayList<Edge>[] g, int src) 

    {

        int[] dist = new int[g.length];

        boolean[] vis = new boolean[g.length];

        

        Arrays.fill(dist, Integer.MAX_VALUE);

        dist[src] = 0;



        // Priority queue for Dijkstra

        PriorityQueue<Pair> pq = new PriorityQueue<>();

        pq.add(new Pair(src, 0));



        // Process the graph

        while (!pq.isEmpty()) 

        {

            Pair p = pq.poll();

            

            if (!vis[p.n]) 

            {   vis[p.n] = true;

                for (Edge e : g[p.n]) 

                {

                    int s = p.n;

                    int v = e.dest;

                    int wt = e.wt;



                    if (dist[s] + wt < dist[v]) 

                    {

                        dist[v] = dist[s] + wt;

                        pq.add(new Pair(v, dist[v]));

                    }

                }

            }

        }


        // Output distances

        System.out.println("Shortest distances from node " + src + ":");

        for (int i = 0; i < dist.length; i++) 

        {

            System.out.println("Node " + i + ": " + (dist[i] == Integer.MAX_VALUE ? "Unreachable" : dist[i]));

        }

    }

}

