package Daa;

import java.util.*;

public class Prims {

    static class Edge 
    {
        int src, dest, weight;

        Edge(int src, int dest, int weight) {

            this.src = src;

            this.dest = dest;

            this.weight = weight;

        }

    }

    static class Pair implements Comparable<Pair> {

        int vertex, cost;

        Pair(int vertex, int cost) {

            this.vertex = vertex;

            this.cost = cost;

        }

        @Override

        public int compareTo(Pair other) {

            return this.cost - other.cost;

        }

    }

    public static void main(String[] args) {

        Scanner sc = new Scanner(System.in);

        System.out.print("Enter the number of vertices: ");

        int vertices = sc.nextInt();

        while (vertices <= 0) {

            System.out.print("Number of vertices must be positive. Enter again: ");

            vertices = sc.nextInt();

        }
 System.out.print("Enter the number of edges: ");

        int edges = sc.nextInt();

        while (edges < 0) 

        {

            System.out.print("Number of edges cannot be negative. Enter again: ");

            edges = sc.nextInt();

        }
        ArrayList<Edge>[] graph = new ArrayList[vertices];

        for (int i = 0; i < vertices; i++) 

        {

            graph[i] = new ArrayList<>();

        }

        System.out.println("Enter each edge in the format: src dest weight");

        for (int i = 0; i < edges; i++) 

        {

            int src = sc.nextInt();

            int dest = sc.nextInt();

            int weight = sc.nextInt();



            while (src < 0 || src >= vertices || dest < 0 || dest >= vertices || weight < 0)

            {

                System.out.println("Invalid edge. Enter again:");

                src = sc.nextInt();

                dest = sc.nextInt();

                weight = sc.nextInt();

            }



            graph[src].add(new Edge(src, dest, weight));

            graph[dest].add(new Edge(dest, src, weight));

        }

        if (edges == 0) {

            System.out.println("No edges in the graph; MST cannot be formed.");

            sc.close();

            return;

        }

        if (vertices == 1) {

            System.out.println("Only one vertex in the graph; MST cost is 0.");

            sc.close();

            return;

        }

        prim(graph, vertices);

        sc.close();

    }

    private static void prim(ArrayList<Edge>[] graph, int vertices) 

    {

        PriorityQueue<Pair> pq = new PriorityQueue<>();

        boolean[] visited = new boolean[vertices];

        int totalCost = 0;

        int visitedCount = 0;

        pq.add(new Pair(0, 0));


        while (!pq.isEmpty()) 

        {

            Pair current = pq.remove();



            if (!visited[current.vertex]) 

            {	

	            visited[current.vertex] = true;

	            visitedCount++;

	            totalCost += current.cost;

	

	            for (Edge edge : graph[current.vertex]) 

	            {

	                if (!visited[edge.dest]) 

	                {

	                    pq.add(new Pair(edge.dest, edge.weight));

	                }

	            }

            }

        }



        if (visitedCount < vertices)

        {

            System.out.println("Graph is disconnected; MST cannot be formed.");

        } else 

        {

            System.out.println("Total cost of the Minimum Spanning Tree (MST): " + totalCost);

        }

    }

}
