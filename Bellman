package Daa;

import java.util.*;



public class Bellman {

    static class Edge 

    {

        int src, dest, wt;

        Edge(int s, int d, int w) 

        {

            src = s;

            dest = d;

            wt = w;

        }

    }



    public static void main(String[] args) 

    {

        Scanner sc = new Scanner(System.in);

        // Input number of vertices and edges

        System.out.println("Enter the number of vertices:");

        int v = sc.nextInt();

        System.out.println("Enter the number of edges:");

        int e = sc.nextInt();



        // Initialize graph as an array of ArrayLists for adjacency list representation

        ArrayList<Edge>[] graph = new ArrayList[v];

        for (int i = 0; i < v; i++) 

        {

            graph[i] = new ArrayList<>();

        }



        // Input each edge and add to the adjacency list

        System.out.println("Enter each edge in the format: src dest weight");

        for (int i = 0; i < e; i++) 

        {

            int src = sc.nextInt();

            int dest = sc.nextInt();

            int wt = sc.nextInt();

            graph[src].add(new Edge(src, dest, wt));

        }



        // Input source vertex

        System.out.print("Enter the source vertex: ");

        int src = sc.nextInt();



        // Run Bellman-Ford algorithm

        bellmanFord(graph, v, src);



        sc.close();

    }



    public static void bellmanFord(ArrayList<Edge>[] graph, int v, int src) 

    {

        // Distance array to store shortest path estimates

        int[] dist = new int[v];

        Arrays.fill(dist, Integer.MAX_VALUE);

        dist[src] = 0;

        // Parent array to store the parent of each vertex

        int[] parent = new int[v];

        Arrays.fill(parent, -1);

        



        // Relax all edges up to (v-1) times

        for (int i = 0; i < v - 1; i++) 

        {

            for (int u = 0; u < v; u++) 

            {

                for (Edge edge : graph[u]) 

                {

                    int dest = edge.dest;

                    int wt = edge.wt;

                    // Relax the edge if possible

                    if (dist[u] != Integer.MAX_VALUE && dist[u] + wt < dist[dest]) 

                    {

                        dist[dest] = dist[u] + wt;

                        parent[dest] = u; // Update the parent

                    }

                }

            }

        }



        // Check for negative-weight cycles

        for (int u = 0; u < v; u++) 

        {

            for (Edge edge : graph[u]) 

            {

                int dest = edge.dest;

                int wt = edge.wt;

                // If a shorter path is found, a negative cycle exists

                if (dist[u] != Integer.MAX_VALUE && dist[u] + wt < dist[dest]) 

                {

                    System.out.println("Graph contains a negative-weight cycle");

                    return;

                }

            }

        }



        // Print shortest path results

        System.out.println("Shortest distances and parents from source " + src + ":");

        for (int i = 0; i < dist.length; i++) 

        {

            System.out.println("Node " +i+", Distance: " +(dist[i] == Integer.MAX_VALUE ? "Infinity" : dist[i]) + ", Parent: " + (parent[i] == -1 ? "None" : parent[i]));

        }

    }

}
